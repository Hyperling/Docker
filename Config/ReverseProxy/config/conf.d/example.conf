# 2022-10-05 Hyperling
# A dummy test file since true scripts are being kept private.
# This should help anyone understand how the project is being used.

# Force HTTPS
server {

    listen 80;
    server_name example.hyperling.com;

    # Redirect to a more secure protocol.
    return 301 https://$host$request_uri;

}

# Serve Resource
server {

    listen 443 ssl http2;
    server_name example.hyperling.com;

    # These are only necessary if you are redirecting somewhere internal. If you
    #  paxx the user to a
    ssl_certificate /usr/local/etc/letsencrypt/live/example.hyperling.com/fullchain.pem;
    ssl_certificate_key /usr/local/etc/letsencrypt/live/example.hyperling.com/privkey.pem;

    # Send traffic to upstream server
    location / {
        proxy_set_header X-Forwarded-Proto https;

        ## General format is PROTOCOL://SERVER:PORT. For example:
        #
        # If using a domain name:
        #proxy_pass http://YOUR_SERVER_NAME:8080;
        #
        # If using an IP address:
        #proxy_pass http://192.168.1.80:8080;
        #
        # If forwarding to an external source:
        #proxy_pass https://website.name/URI;
        #
        # Or alternatively, do it like the force of HTTPS:
        #return 301 https://website.name/URI;

        # So this should forward you from 'example.hyperling.com' to a real site:
        proxy_pass https://cahlen.org;
    }

}
